/* _functions.scss */

/* ---------------------------------------------------------------------
	String Replace
    Replace `$search` with `$replace` in `$string`
    @author Kitty Giraudel

    @param {String} $string - Initial string
    @param {String} $search - Substring to replace
    @param {String} $replace ('') - New value
    @return {String} - Updated string
------------------------------------------------------------------------ */
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);
    
    @if $index {
      @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }
    
    @return $string;
  }
  
  /* ---------------------------------------------------------------------
      String to number converter
      Casts `$value` to `$num` 
      @author Kitty Giraudel
  
      @param {String | Number} $value - Value to be parsed
      @return {Number}
  ------------------------------------------------------------------------ */
  @function to-number($value) {
    @if type-of($value) == 'number' {
      @return $value;
    } @else if type-of($value) != 'string' {
      $_: log('Value for `to-number` should be a number or a string.');
    }
    
    $result: 0;
    $digits: 0;
    $minus: str-slice($value, 1, 1) == '-';
    $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);
    
    @for $i from if($minus, 2, 1) through str-length($value) {
      $character: str-slice($value, $i, $i);
      
      @if not (index(map-keys($numbers), $character) or $character == '.') {
        @return to-length(if($minus, -$result, $result), str-slice($value, $i))
      }
      
      @if $character == '.' {
        $digits: 1; 
      } @else if $digits == 0 {
        $result: $result * 10 + map-get($numbers, $character);  
      } @else {
        $digits: $digits * 10;
        $result: $result + map-get($numbers, $character) / $digits;
      }
    }
    
    @return if($minus, -$result, $result);
  }
  
  /* ---------------------------------------------------------------------
      String split at delimiter
  
      @param {string} 
      @return {list}
  ------------------------------------------------------------------------ */
  @function str-split($string, $separator) {
    // empty array/list
    $split-arr: ();
    // first index of separator in string
    $index : str-index($string, $separator);
    // loop through string
    @while $index != null {
        // get the substring from the first character to the separator
        $item: str-slice($string, 1, $index - 1);
        // push item to array
        $split-arr: append($split-arr, $item);
        // remove item and separator from string
        $string: str-slice($string, $index + 1);
        // find new index of separator
        $index : str-index($string, $separator);
    }
    // add the remaining string to list (the last item)
    $split-arr: append($split-arr, $string);
  
    @return $split-arr;
  }
  